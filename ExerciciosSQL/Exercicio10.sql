DROP TABLE FUNCIONARIOS;
CREATE TABLE FUNCIONARIOS AS (SELECT * FROM HR.EMPLOYEES);
 
SELECT * FROM FUNCIONARIOS;
 
DROP TABLE LOG_FUNCIONARIOS;
CREATE TABLE LOG_FUNCIONARIOS(
    LOG_ID NUMBER(12) PRIMARY KEY,
    EMPLOYEE_ID NUMBER(6) NOT NULL,
    SALARY_ANTES NUMBER(8,2),
    SALARY_DEPOIS NUMBER(8,2),
    JOB_ID_ANTES VARCHAR2(10),
    JOB_ID_DEPOIS VARCHAR2(10),
    USUSARIO VARCHAR2(30) NOT NULL,
    DATA_HORA DATE NOT NULL,
    OPERACAO CHAR(1) NOT NULL -- I INSERT, U-UPDATE, D-DELETE
);
 
CREATE SEQUENCE SEQ_LOG_FUNCIONARIOS
MAXVALUE 999999999999
NOCACHE
NOCYCLE;
 
SELECT * FROM FUNCIONARIOS;
SELECT * FROM LOG_FUNCIONARIOS;
 
 
CREATE OR REPLACE TRIGGER TRG_FUNCIONARIOS_LOG
BEFORE INSERT OR DELETE OR UPDATE OF SALARY, JOB_ID
ON FUNCIONARIOS
FOR EACH ROW
DECLARE
 
BEGIN
 
IF INSERTING THEN
 
    INSERT INTO LOG_FUNCIONARIOS( LOG_ID, EMPLOYEE_ID, SALARY_ANTES, SALARY_DEPOIS, JOB_ID_ANTES, JOB_ID_DEPOIS, USUSARIO, DATA_HORA, OPERACAO) 
    VALUES(SEQ_LOG_FUNCIONARIOS.NEXTVAL, :NEW.EMPLOYEE_ID, :OLD.SALARY, :NEW.SALARY, :OLD.JOB_ID,:NEW.JOB_ID, USER, SYSDATE, 'I');
 
ELSIF UPDATING THEN
 
    INSERT INTO LOG_FUNCIONARIOS( LOG_ID, EMPLOYEE_ID, SALARY_ANTES, SALARY_DEPOIS, JOB_ID_ANTES, JOB_ID_DEPOIS, USUSARIO, DATA_HORA, OPERACAO) 
    VALUES(SEQ_LOG_FUNCIONARIOS.NEXTVAL,:NEW.EMPLOYEE_ID, :OLD.SALARY, :NEW.SALARY, :OLD.JOB_ID,:NEW.JOB_ID, USER, SYSDATE, 'U');
 
ELSIF DELETING THEN
 
    INSERT INTO LOG_FUNCIONARIOS( LOG_ID, EMPLOYEE_ID, SALARY_ANTES, SALARY_DEPOIS, JOB_ID_ANTES, JOB_ID_DEPOIS, USUSARIO, DATA_HORA, OPERACAO) 
    VALUES(SEQ_LOG_FUNCIONARIOS.NEXTVAL,:OLD.EMPLOYEE_ID, :OLD.SALARY, :NEW.SALARY, :OLD.JOB_ID,:NEW.JOB_ID, USER, SYSDATE, 'D');
 
END IF;
 
--NÃO COLOCAR COMMIT OU ROLLBACK NESSA PORRA HEIN CARALHO, ISSO É COISA DE DOENTE
END;