DROP TABLE EMPRESA;

CREATE TABLE EMPRESA (
    ID NUMBER (4)  PRIMARY KEY,
    NOME VARCHAR2(120) NOT NULL,
    TELEFONE NUMBER (11) NULL,
    CAPITAL NUMBER (15,2) NOT NULL
);

CREATE SEQUENCE SEQ_EMPRESA
    START WITH 1
    MAXVALUE 999
    INCREMENT BY 1
    NOCACHE
    NOCYCLE;

--------------------------------------------------------------------

CREATE OR REPLACE
FUNCTION FUNC_INSEMPRESA (P_NOME IN EMPRESA.NOME%TYPE,
                          P_TELEFONE EMPRESA.TELEFONE%TYPE,
                          P_CAPITAL EMPRESA.CAPITAL%TYPE)

RETURN NUMBER


IS

    V_TELEFONE NUMBER (1) := 0;
    V_QDTE NUMBER (1);
    V_SAIDA NUMBER(1);
    V_NOME_CODIGO VARCHAR2 (120) := 'FUNC_INSEMPRESA';
    Y NUMBER (2);
    V_PARAMETROS VARCHAR2 (240) := 'P_RAZAO = ' || P_RAZAO || 
                                '- P_TELEFONE = ' || P_TELEFONE || 
                                ' - P_CAPITAL = '|| P_CAPITAL;

BEGIN 
    Y := 8951.12;
    IF P_CAPITAL >= 0 AND P_CAPITAL <=1000000 THEN
        IF P_TELEFONE >=0 AND P_TELEFONE <= 99999999999 THEN
            SELECT COUNT (*) INTO V_QDTE FROM EMPRESA
                WHERE TRANSLATE(UPPER(NOME),'ÃÁÀÂÄÇÈÉÊËÍÌÏÎÓÒÔÖÚÙÛÜ', 'AAAAAÇEEEEIIIIOOOOUUUU') = 
                   TRANSLATE(UPPER(P_NOME), 'ÃÁÀÂÄÇÈÉÊËÍÌÏÎÓÒÔÖÚÙÛÜ', 'AAAAAÇEEEEIIIIOOOOUUUU');
        
            IF V_QDTE = 0 THEN
                INSERT INTO EMPRESA (ID, NOME, TELEFONE, CAPITAL)
                 VALUES (SEQ_EMPRESA.NEXTVAL, P_NOME, P_TELEFONE, P_CAPITAL);
                 V_SAIDA:= 0;
             ELSE 
                V_SAIDA:= -1; ---RAZAO SOCIAL JA EXISTE OU É NULA
            END IF;
        ELSE
            V_SAIDA:= -3; --NUMERO DO TELEFONE FOR NULO OU MAIOR QUE 11 NOVES  
        END IF;
    ELSE 
    V_SAIDA:= -2; -- CAPITAL FOR NULO OU FORA DA FAIXA ENTRE ZERO E 1000000
    
    END IF;

    RETURN V_SAIDA;  
    
    EXCEPTION

    WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE ('ERROOOOOOOOOOOOOOOOOO'); 
    DBMS_OUTPUT.PUT_LINE (SQLCODE); -- RETORNA O CODIGO DE ERRO
    DBMS_OUTPUT.PUT_LINE (SQLERRM); -- RETORNA A DESCRIÇÃO DO CODIGO DE ERRO
    DBMS_OUTPUT.PUT_LINE (DBMS_UTILITY.FORMAT_ERROR_BACKTRACE); -- MOSTRA O ERRO E A LINHA DO ERRO 
    DBMS_OUTPUT.PUT_LINE (USER); -- RETORNA O USUARIO 
    DBMS_OUTPUT.PUT_LINE (NOME_CODIGO); -- RETORNA O NOME DO MEU CODIGO DECLARADO NO DECLARE
    DBMS_OUTPUT.PUT_LINE (V_PARAMETROS); -- RETORNA O PARAMETRO 
    INSERT INTO LOG_EXECUCAO    
        (ID_LOG, NOME_PROGRAMACAO, PARAMETROS_ENTRADA, CODIGO_ERRO, DESCRICAO_ERRO, LINHAO_ERRO, USUARIO, DATA_HORA, 
        STATUS, DESCRICAO_RESOLVIDO)
        VALUES (SEQ_LOG_EXECUCAO.NEXTVAL, V_NOME_CODIGO, V_PARAMETROS, V_DESCRICAO, V_CODIGO_ERRO, V_)
END;


CREATE TABLE LOG_EXECUCAO(
    ID_LOG NUMBER PRIMARY KEY,
    NOME_PROGRAMACAO VARCHAR2 (120) NOT NULL,
    PARAMETROS_ENTRADA VARCHAR2 (240) NOT NULL,,
    CODIGO_ERRO NUMBER (5) NOT NULL,
    DESCRICAO_ERRO VARCHAR2 (120) NOT NULL,
    LINHA_ERRO VARCHAR2 (120) NOT NULL,
    USUARIO VARCHAR2 (30) NOT NULL,
    DATA_HORA DATE NOT NULL,
    STATUS CHAR (1) NOT NULL, --- E-ERRO -R RESOLVIDOD
    DESCRICAO_RESOLVIDO VARCHAR2 (512)
    
);

CRETE SEQUENCE SEQ_LOGEXECUCAO
NOCACHE
NOCYCLE;

SELECT * FROM SEQ_LOGEXECUCAO;

-----------------------------------------------------------------------------

DECLARE

    RETORNO NUMBER (3);

BEGIN
    RETORNO := FUNC_INSEMPRESA ('FENTY BEAUTY', 109876543, 10000);
    DBMS_OUTPUT.PUT_LINE('RETORNO FOI DE' || RETORNO);

END;